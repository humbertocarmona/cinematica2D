<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:epub="http://www.idpf.org/2007/ops"
>
  <head>
    <meta charset="utf-8" />
    <title>Cinem√°tica 2D</title>
    <link rel="stylesheet" type="text/css" href="library/css/ejss.css" />
    <script src="library/scripts/common_script.js"></script>
    <script src="library/scripts/textresizedetector.js"></script>
    <script src="library/ejsS.v1.min.js"></script>
    <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      /* _inputParameters: an object with different values for the model parameters */
      function cinematica2Dv3(
        _topFrame,
        _libraryPath,
        _codebasePath,
        _inputParameters
      ) {
        var _model = EJSS_CORE.createAnimationLMS();
        var _view;
        var _isPlaying = false;
        var _isPaused = true;
        var _isMobile =
          navigator === undefined
            ? false
            : navigator.userAgent.match(
                /iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i
              );

        var _stringProperties = {};
        var _tools = {
          showInputDialog: EJSS_INTERFACE.BoxPanel.showInputDialog,
          showOkDialog: EJSS_INTERFACE.BoxPanel.showOkDialog,
          showOkCancelDialog: EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
          downloadText: EJSS_TOOLS.File.downloadText,
          uploadText: function (action) {
            EJSS_TOOLS.File.uploadText(_model, action);
          },
        };

        function _play() {
          _isPaused = false;
          _isPlaying = true;
          _model.play();
        }
        function _pause() {
          _isPaused = true;
          _isPlaying = false;
          _model.pause();
        }
        function _step() {
          _pause();
          _model.step();
        }
        function _reset() {
          _model.reset();
          _isPaused = _model.isPaused();
          _isPlaying = _model.isPlaying();
        }
        _model._play = _play;
        _model._pause = _pause;
        _model._step = _step;
        _model._reset = _reset;
        function _update() {
          _model.update();
        }
        function _initialize() {
          _model.initialize();
        }
        function _setFPS(_fps) {
          _model.setFPS(_fps);
        }
        function _setDelay(_delay) {
          _model.setDelay(_delay);
        }
        function _setStepsPerDisplay(_spd) {
          _model.setStepsPerDisplay(_spd);
        }
        function _setUpdateView(_updateView) {
          _model.setUpdateView(_updateView);
        }
        function _setAutoplay(_auto) {
          _model.setAutoplay(_auto);
        }
        function _println(_message) {
          console.log(_message);
        }

        function _breakAfterThisPage() {
          _model.setShouldBreak(true);
        }

        function _resetSolvers() {
          if (_model.resetSolvers) _model.resetSolvers();
        }

        function _saveText(name, type, content) {
          if (_model.saveText) _model.saveText(name, type, content);
        }

        function _saveState(name) {
          if (_model.saveState) _model.saveState(name);
        }

        function _saveImage(name, panelname) {
          if (_model.saveImage) _model.saveImage(name, panelname);
        }

        function _readState(url, type) {
          if (_model.readState) _model.readState(url, type);
        }

        function _readText(url, type, varname) {
          if (_model.readText) _model.readText(url, type, varname);
        }

        function _getStringProperty(propertyName) {
          var _value = _stringProperties[propertyName];
          if (_value === undefined) return propertyName;
          else return _value;
        }
        var __pagesEnabled = [];
        function _setPageEnabled(pageName, enabled) {
          __pagesEnabled[pageName] = enabled;
        }

        var x; // EjsS Model.Variables.Dynamical Vars.x
        var vx; // EjsS Model.Variables.Dynamical Vars.vx
        var tethax; // EjsS Model.Variables.Dynamical Vars.tethax
        var tethaax; // EjsS Model.Variables.Dynamical Vars.tethaax
        var ax; // EjsS Model.Variables.Dynamical Vars.ax
        var y; // EjsS Model.Variables.Dynamical Vars.y
        var vy; // EjsS Model.Variables.Dynamical Vars.vy
        var ay; // EjsS Model.Variables.Dynamical Vars.ay
        var vel; // EjsS Model.Variables.Dynamical Vars.vel
        var acel; // EjsS Model.Variables.Dynamical Vars.acel
        var tethay; // EjsS Model.Variables.Dynamical Vars.tethay
        var tethaay; // EjsS Model.Variables.Dynamical Vars.tethaay
        var t; // EjsS Model.Variables.Dynamical Vars.t
        var dt; // EjsS Model.Variables.Dynamical Vars.dt

        var xmin; // EjsS Model.Variables.plotrange.xmin
        var xmax; // EjsS Model.Variables.plotrange.xmax
        var ymin; // EjsS Model.Variables.plotrange.ymin
        var ymax; // EjsS Model.Variables.plotrange.ymax
        var tmax; // EjsS Model.Variables.plotrange.tmax
        var plotsize; // EjsS Model.Variables.plotrange.plotsize
        var plotsize2; // EjsS Model.Variables.plotrange.plotsize2

        var showTraj; // EjsS Model.Variables.Constants.showTraj
        var showAcel; // EjsS Model.Variables.Constants.showAcel
        var showAcelPlt; // EjsS Model.Variables.Constants.showAcelPlt
        var showVel; // EjsS Model.Variables.Constants.showVel
        var showVelPlt; // EjsS Model.Variables.Constants.showVelPlt
        var showPos; // EjsS Model.Variables.Constants.showPos
        var showPosPlt; // EjsS Model.Variables.Constants.showPosPlt
        var showPlot; // EjsS Model.Variables.Constants.showPlot
        var showEqs; // EjsS Model.Variables.Constants.showEqs
        var function_x_t; // EjsS Model.Variables.Constants.function_x_t
        var function_y_t; // EjsS Model.Variables.Constants.function_y_t

        var ti; // EjsS Model.Variables.limite.ti
        var tii; // EjsS Model.Variables.limite.tii
        var xi; // EjsS Model.Variables.limite.xi
        var xii; // EjsS Model.Variables.limite.xii
        var yi; // EjsS Model.Variables.limite.yi
        var yii; // EjsS Model.Variables.limite.yii
        var tff; // EjsS Model.Variables.limite.tff
        var tf; // EjsS Model.Variables.limite.tf
        var xf; // EjsS Model.Variables.limite.xf
        var xff; // EjsS Model.Variables.limite.xff
        var yf; // EjsS Model.Variables.limite.yf
        var yff; // EjsS Model.Variables.limite.yff
        var vmedx; // EjsS Model.Variables.limite.vmedx
        var vmedy; // EjsS Model.Variables.limite.vmedy
        var ShowLimite; // EjsS Model.Variables.limite.ShowLimite
        var pi_selected; // EjsS Model.Variables.limite.pi_selected
        var pf_selected; // EjsS Model.Variables.limite.pf_selected

        _model.getOdes = function () {
          return [];
        };

        _model.removeEvents = function () {};

        function _serialize() {
          return _model.serialize();
        }

        _model._userSerialize = function () {
          return {
            x: x,
            vx: vx,
            tethax: tethax,
            tethaax: tethaax,
            ax: ax,
            y: y,
            vy: vy,
            ay: ay,
            vel: vel,
            acel: acel,
            tethay: tethay,
            tethaay: tethaay,
            t: t,
            dt: dt,
            xmin: xmin,
            xmax: xmax,
            ymin: ymin,
            ymax: ymax,
            tmax: tmax,
            plotsize: plotsize,
            plotsize2: plotsize2,
            showTraj: showTraj,
            showAcel: showAcel,
            showAcelPlt: showAcelPlt,
            showVel: showVel,
            showVelPlt: showVelPlt,
            showPos: showPos,
            showPosPlt: showPosPlt,
            showPlot: showPlot,
            showEqs: showEqs,
            function_x_t: function_x_t,
            function_y_t: function_y_t,
            ti: ti,
            tii: tii,
            xi: xi,
            xii: xii,
            yi: yi,
            yii: yii,
            tff: tff,
            tf: tf,
            xf: xf,
            xff: xff,
            yf: yf,
            yff: yff,
            vmedx: vmedx,
            vmedy: vmedy,
            ShowLimite: ShowLimite,
            pi_selected: pi_selected,
            pf_selected: pf_selected,
          };
        };

        function _serializePublic() {
          return _model.serializePublic();
        }

        _model._userSerializePublic = function () {
          return {
            x: x,
            vx: vx,
            tethax: tethax,
            tethaax: tethaax,
            ax: ax,
            y: y,
            vy: vy,
            ay: ay,
            vel: vel,
            acel: acel,
            tethay: tethay,
            tethaay: tethaay,
            t: t,
            dt: dt,
            xmin: xmin,
            xmax: xmax,
            ymin: ymin,
            ymax: ymax,
            tmax: tmax,
            plotsize: plotsize,
            plotsize2: plotsize2,
            showTraj: showTraj,
            showAcel: showAcel,
            showAcelPlt: showAcelPlt,
            showVel: showVel,
            showVelPlt: showVelPlt,
            showPos: showPos,
            showPosPlt: showPosPlt,
            showPlot: showPlot,
            showEqs: showEqs,
            function_x_t: function_x_t,
            function_y_t: function_y_t,
            ti: ti,
            tii: tii,
            xi: xi,
            xii: xii,
            yi: yi,
            yii: yii,
            tff: tff,
            tf: tf,
            xf: xf,
            xff: xff,
            yf: yf,
            yff: yff,
            vmedx: vmedx,
            vmedy: vmedy,
            ShowLimite: ShowLimite,
            pi_selected: pi_selected,
            pf_selected: pf_selected,
          };
        };

        _model._readParameters = function (json) {
          if (typeof json.x != "undefined") x = json.x;
          if (typeof json.vx != "undefined") vx = json.vx;
          if (typeof json.tethax != "undefined") tethax = json.tethax;
          if (typeof json.tethaax != "undefined") tethaax = json.tethaax;
          if (typeof json.ax != "undefined") ax = json.ax;
          if (typeof json.y != "undefined") y = json.y;
          if (typeof json.vy != "undefined") vy = json.vy;
          if (typeof json.ay != "undefined") ay = json.ay;
          if (typeof json.vel != "undefined") vel = json.vel;
          if (typeof json.acel != "undefined") acel = json.acel;
          if (typeof json.tethay != "undefined") tethay = json.tethay;
          if (typeof json.tethaay != "undefined") tethaay = json.tethaay;
          if (typeof json.t != "undefined") t = json.t;
          if (typeof json.dt != "undefined") dt = json.dt;
          if (typeof json.xmin != "undefined") xmin = json.xmin;
          if (typeof json.xmax != "undefined") xmax = json.xmax;
          if (typeof json.ymin != "undefined") ymin = json.ymin;
          if (typeof json.ymax != "undefined") ymax = json.ymax;
          if (typeof json.tmax != "undefined") tmax = json.tmax;
          if (typeof json.plotsize != "undefined") plotsize = json.plotsize;
          if (typeof json.plotsize2 != "undefined") plotsize2 = json.plotsize2;
          if (typeof json.showTraj != "undefined") showTraj = json.showTraj;
          if (typeof json.showAcel != "undefined") showAcel = json.showAcel;
          if (typeof json.showAcelPlt != "undefined")
            showAcelPlt = json.showAcelPlt;
          if (typeof json.showVel != "undefined") showVel = json.showVel;
          if (typeof json.showVelPlt != "undefined")
            showVelPlt = json.showVelPlt;
          if (typeof json.showPos != "undefined") showPos = json.showPos;
          if (typeof json.showPosPlt != "undefined")
            showPosPlt = json.showPosPlt;
          if (typeof json.showPlot != "undefined") showPlot = json.showPlot;
          if (typeof json.showEqs != "undefined") showEqs = json.showEqs;
          if (typeof json.function_x_t != "undefined")
            function_x_t = json.function_x_t;
          if (typeof json.function_y_t != "undefined")
            function_y_t = json.function_y_t;
          if (typeof json.ti != "undefined") ti = json.ti;
          if (typeof json.tii != "undefined") tii = json.tii;
          if (typeof json.xi != "undefined") xi = json.xi;
          if (typeof json.xii != "undefined") xii = json.xii;
          if (typeof json.yi != "undefined") yi = json.yi;
          if (typeof json.yii != "undefined") yii = json.yii;
          if (typeof json.tff != "undefined") tff = json.tff;
          if (typeof json.tf != "undefined") tf = json.tf;
          if (typeof json.xf != "undefined") xf = json.xf;
          if (typeof json.xff != "undefined") xff = json.xff;
          if (typeof json.yf != "undefined") yf = json.yf;
          if (typeof json.yff != "undefined") yff = json.yff;
          if (typeof json.vmedx != "undefined") vmedx = json.vmedx;
          if (typeof json.vmedy != "undefined") vmedy = json.vmedy;
          if (typeof json.ShowLimite != "undefined")
            ShowLimite = json.ShowLimite;
          if (typeof json.pi_selected != "undefined")
            pi_selected = json.pi_selected;
          if (typeof json.pf_selected != "undefined")
            pf_selected = json.pf_selected;
        };

        _model._readParametersPublic = function (json) {
          if (typeof json.x != "undefined") x = json.x;
          if (typeof json.vx != "undefined") vx = json.vx;
          if (typeof json.tethax != "undefined") tethax = json.tethax;
          if (typeof json.tethaax != "undefined") tethaax = json.tethaax;
          if (typeof json.ax != "undefined") ax = json.ax;
          if (typeof json.y != "undefined") y = json.y;
          if (typeof json.vy != "undefined") vy = json.vy;
          if (typeof json.ay != "undefined") ay = json.ay;
          if (typeof json.vel != "undefined") vel = json.vel;
          if (typeof json.acel != "undefined") acel = json.acel;
          if (typeof json.tethay != "undefined") tethay = json.tethay;
          if (typeof json.tethaay != "undefined") tethaay = json.tethaay;
          if (typeof json.t != "undefined") t = json.t;
          if (typeof json.dt != "undefined") dt = json.dt;
          if (typeof json.xmin != "undefined") xmin = json.xmin;
          if (typeof json.xmax != "undefined") xmax = json.xmax;
          if (typeof json.ymin != "undefined") ymin = json.ymin;
          if (typeof json.ymax != "undefined") ymax = json.ymax;
          if (typeof json.tmax != "undefined") tmax = json.tmax;
          if (typeof json.plotsize != "undefined") plotsize = json.plotsize;
          if (typeof json.plotsize2 != "undefined") plotsize2 = json.plotsize2;
          if (typeof json.showTraj != "undefined") showTraj = json.showTraj;
          if (typeof json.showAcel != "undefined") showAcel = json.showAcel;
          if (typeof json.showAcelPlt != "undefined")
            showAcelPlt = json.showAcelPlt;
          if (typeof json.showVel != "undefined") showVel = json.showVel;
          if (typeof json.showVelPlt != "undefined")
            showVelPlt = json.showVelPlt;
          if (typeof json.showPos != "undefined") showPos = json.showPos;
          if (typeof json.showPosPlt != "undefined")
            showPosPlt = json.showPosPlt;
          if (typeof json.showPlot != "undefined") showPlot = json.showPlot;
          if (typeof json.showEqs != "undefined") showEqs = json.showEqs;
          if (typeof json.function_x_t != "undefined")
            function_x_t = json.function_x_t;
          if (typeof json.function_y_t != "undefined")
            function_y_t = json.function_y_t;
          if (typeof json.ti != "undefined") ti = json.ti;
          if (typeof json.tii != "undefined") tii = json.tii;
          if (typeof json.xi != "undefined") xi = json.xi;
          if (typeof json.xii != "undefined") xii = json.xii;
          if (typeof json.yi != "undefined") yi = json.yi;
          if (typeof json.yii != "undefined") yii = json.yii;
          if (typeof json.tff != "undefined") tff = json.tff;
          if (typeof json.tf != "undefined") tf = json.tf;
          if (typeof json.xf != "undefined") xf = json.xf;
          if (typeof json.xff != "undefined") xff = json.xff;
          if (typeof json.yf != "undefined") yf = json.yf;
          if (typeof json.yff != "undefined") yff = json.yff;
          if (typeof json.vmedx != "undefined") vmedx = json.vmedx;
          if (typeof json.vmedy != "undefined") vmedy = json.vmedy;
          if (typeof json.ShowLimite != "undefined")
            ShowLimite = json.ShowLimite;
          if (typeof json.pi_selected != "undefined")
            pi_selected = json.pi_selected;
          if (typeof json.pf_selected != "undefined")
            pf_selected = json.pf_selected;
        };

        function _unserializePublic(json) {
          return _model.unserializePublic(json);
        }

        _model._userUnserializePublic = function (json) {
          _model._readParametersPublic(json);
          _resetSolvers();
          _model.update();
        };

        function _unserialize(json) {
          return _model.unserialize(json);
        }

        _model._userUnserialize = function (json) {
          _model._readParameters(json);
          _resetSolvers();
          _model.update();
        };

        _model.addToReset(function () {
          __pagesEnabled["Init Page"] = true;
          __pagesEnabled["Evol Page"] = true;
          __pagesEnabled["Energy"] = true;
        });

        _model.addToReset(function () {
          x = -8; // EjsS Model.Variables.Dynamical Vars.x
          vx = 0.0; // EjsS Model.Variables.Dynamical Vars.vx
          tethax = 0.0; // EjsS Model.Variables.Dynamical Vars.tethax
          tethaax = 0.0; // EjsS Model.Variables.Dynamical Vars.tethaax
          ax = 0.2; // EjsS Model.Variables.Dynamical Vars.ax
          y = 8; // EjsS Model.Variables.Dynamical Vars.y
          vy = 0; // EjsS Model.Variables.Dynamical Vars.vy
          ay = 0; // EjsS Model.Variables.Dynamical Vars.ay
          tethay = 0; // EjsS Model.Variables.Dynamical Vars.tethay
          tethaay = 0; // EjsS Model.Variables.Dynamical Vars.tethaay
          t = 0.0; // EjsS Model.Variables.Dynamical Vars.t
          dt = 0.005; // EjsS Model.Variables.Dynamical Vars.dt
        });

        _model.addToReset(function () {
          xmin = -3; // EjsS Model.Variables.plotrange.xmin
          xmax = 3; // EjsS Model.Variables.plotrange.xmax
          ymin = -3; // EjsS Model.Variables.plotrange.ymin
          ymax = 3; // EjsS Model.Variables.plotrange.ymax
          tmax = 1.0; // EjsS Model.Variables.plotrange.tmax
          plotsize = 450; // EjsS Model.Variables.plotrange.plotsize
          plotsize2 = 300; // EjsS Model.Variables.plotrange.plotsize2
        });

        _model.addToReset(function () {
          showTraj = false; // EjsS Model.Variables.Constants.showTraj
          showAcel = false; // EjsS Model.Variables.Constants.showAcel
          showAcelPlt = false; // EjsS Model.Variables.Constants.showAcelPlt
          showVel = false; // EjsS Model.Variables.Constants.showVel
          showVelPlt = false; // EjsS Model.Variables.Constants.showVelPlt
          showPos = false; // EjsS Model.Variables.Constants.showPos
          showPosPlt = false; // EjsS Model.Variables.Constants.showPosPlt
          showPlot = true; // EjsS Model.Variables.Constants.showPlot
          showEqs = false; // EjsS Model.Variables.Constants.showEqs
          function_x_t = "-1.8 + 12*t - 10*t*t"; // EjsS Model.Variables.Constants.function_x_t
          function_y_t = "1.8 + 0.5*t- 4.9*t*t"; // EjsS Model.Variables.Constants.function_y_t
        });

        _model.addToReset(function () {
          ShowLimite = false; // EjsS Model.Variables.limite.ShowLimite
          pi_selected = false; // EjsS Model.Variables.limite.pi_selected
          pf_selected = false; // EjsS Model.Variables.limite.pf_selected
        });

        if (_inputParameters) {
          _inputParameters = _model.parseInputParameters(_inputParameters);
          if (_inputParameters)
            _model.addToReset(function () {
              _model._readParameters(_inputParameters);
            });
        }

        _model.addToReset(function () {
          _model.setAutoplay(false);
          _model.setPauseOnPageExit(true);
          _model.setFPS(24);
          _model.setStepsPerDisplay(2);
        });

        function comp_x() {
          // > CustomCode.Lib Page:1
          if (!pi_selected) {
            // > CustomCode.Lib Page:2
            pi_selected = true; // > CustomCode.Lib Page:3
            ti = 0.5; // > CustomCode.Lib Page:4
            xi = _view.x_t.evaluate({ t: ti }); // > CustomCode.Lib Page:5
            yi = _view.y_t.evaluate({ t: ti }); // > CustomCode.Lib Page:6
          } else if (!pf_selected) {
            // > CustomCode.Lib Page:7
            pf_selected = true; // > CustomCode.Lib Page:8
            tf = ti + 0.25; // > CustomCode.Lib Page:9
            xf = _view.x_t.evaluate({ t: tf }); // > CustomCode.Lib Page:10
            yf = _view.y_t.evaluate({ t: tf }); // > CustomCode.Lib Page:11
            vmedx = (xf - xi) / (tf - ti); // > CustomCode.Lib Page:12
            vmedy = (yf - yi) / (tf - ti); // > CustomCode.Lib Page:13
            tii = ti - 0.25; // > CustomCode.Lib Page:14
            xii = xi + vmedx * (tii - ti); // > CustomCode.Lib Page:15
            yii = yi + vmedy * (tii - ti); // > CustomCode.Lib Page:16
            tff = tf + 0.25; // > CustomCode.Lib Page:17
            xff = xi + vmedx * (tff - ti); // > CustomCode.Lib Page:18
            yff = yi + vmedy * (tff - ti); // > CustomCode.Lib Page:19
          } // > CustomCode.Lib Page:20
        } // > CustomCode.Lib Page:21
        function drag_pix() {
          // > CustomCode.Lib Page:22
          xi = _view.x_t.evaluate({ t: ti }); // > CustomCode.Lib Page:23
          yi = _view.y_t.evaluate({ t: ti }); // > CustomCode.Lib Page:24
          if (Math.abs(tf - ti) > 1e-3) {
            // > CustomCode.Lib Page:25
            vmedx = (xf - xi) / (tf - ti); // > CustomCode.Lib Page:26
            vmedy = (yf - yi) / (tf - ti); // > CustomCode.Lib Page:27
          } // > CustomCode.Lib Page:28
          tii = ti - 3; // > CustomCode.Lib Page:29
          xii = xi + vmedx * (tii - ti); // > CustomCode.Lib Page:30
          yii = yi + vmedy * (tii - ti); // > CustomCode.Lib Page:31
          tff = tf + 3; // > CustomCode.Lib Page:32
          xff = xi + vmedx * (tff - ti); // > CustomCode.Lib Page:33
          yff = yi + vmedy * (tff - ti); // > CustomCode.Lib Page:34
        } // > CustomCode.Lib Page:35
        function drag_pfx() {
          // > CustomCode.Lib Page:36
          xf = _view.x_t.evaluate({ t: tf }); // > CustomCode.Lib Page:37
          yf = _view.y_t.evaluate({ t: tf }); // > CustomCode.Lib Page:38
          if (Math.abs(tf - ti) > 1e-3) {
            // > CustomCode.Lib Page:39
            vmedx = (xf - xi) / (tf - ti); // > CustomCode.Lib Page:40
            vmedy = (yf - yi) / (tf - ti); // > CustomCode.Lib Page:41
          } // > CustomCode.Lib Page:42
          tii = ti - 3; // > CustomCode.Lib Page:43
          xii = xi + vmedx * (tii - ti); // > CustomCode.Lib Page:44
          yii = yi + vmedy * (tii - ti); // > CustomCode.Lib Page:45
          tff = tf + 3; // > CustomCode.Lib Page:46
          xff = xi + vmedx * (tff - ti); // > CustomCode.Lib Page:47
          yff = yi + vmedy * (tff - ti); // > CustomCode.Lib Page:48
        } // > CustomCode.Lib Page:49

        function set_x_time_on() {
          // > CustomCode.Lib Page 2:1
          if (showPosPlt) {
            // > CustomCode.Lib Page 2:2
            _view.x_time.setProperty("Display", ""); // > CustomCode.Lib Page 2:3
            _view.y_time.setProperty("Display", ""); // > CustomCode.Lib Page 2:4
          } // > CustomCode.Lib Page 2:5
        } // > CustomCode.Lib Page 2:6
        function set_x_time_off() {
          // > CustomCode.Lib Page 2:7
          _view.x_time.setProperty("Display", "none"); // > CustomCode.Lib Page 2:8
          _view.y_time.setProperty("Display", "none"); // > CustomCode.Lib Page 2:9
        } // > CustomCode.Lib Page 2:10
        function set_v_time_on() {
          // > CustomCode.Lib Page 2:11
          if (showVelPlt) {
            // > CustomCode.Lib Page 2:12
            _view.velocity_time.setProperty("Display", ""); // > CustomCode.Lib Page 2:13
            _view.bottomPanel.setProperty("Width", 850); // > CustomCode.Lib Page 2:14
          } // > CustomCode.Lib Page 2:15
        } // > CustomCode.Lib Page 2:16
        function set_v_time_off() {
          // > CustomCode.Lib Page 2:17
          _view.velocity_time.setProperty("Display", "none"); // > CustomCode.Lib Page 2:18
        } // > CustomCode.Lib Page 2:19
        function set_a_time_on() {
          // > CustomCode.Lib Page 2:20
          if (showAcelPlt) {
            // > CustomCode.Lib Page 2:21
            _view.acel_time.setProperty("Display", ""); // > CustomCode.Lib Page 2:22
            _view.bottomPanel.setProperty("Width", 850); // > CustomCode.Lib Page 2:23
          } // > CustomCode.Lib Page 2:24
        } // > CustomCode.Lib Page 2:25
        function stepBack2() {
          // > CustomCode.Lib Page 2:26
          t = t - 5 * dt; // > CustomCode.Lib Page 2:27
          _step(); // > CustomCode.Lib Page 2:28
        } // > CustomCode.Lib Page 2:29
        function set_a_time_off() {
          // > CustomCode.Lib Page 2:30
          _view.acel_time.setProperty("Display", "none"); // > CustomCode.Lib Page 2:31
        } // > CustomCode.Lib Page 2:32

        _model.addToInitialization(function () {
          if (!__pagesEnabled["Init Page"]) return;
          _view._update(); // > Initialization.Init Page:1
          if (showPos == false) {
            // > Initialization.Init Page:2
            _view.x_time.setProperty("Display", "none"); // > Initialization.Init Page:3
            _view.y_time.setProperty("Display", "none"); // > Initialization.Init Page:4
            _view.bottomPanel.setProperty("Width", 450); // > Initialization.Init Page:5
          } // > Initialization.Init Page:6
          if (showVel == false) {
            // > Initialization.Init Page:7
            _view.velocity_time.setProperty("Display", "none"); // > Initialization.Init Page:8
            _view.bottomPanel.setProperty("Width", 450); // > Initialization.Init Page:9
          } // > Initialization.Init Page:10
          if (showVel == false) {
            // > Initialization.Init Page:11
            _view.acel_time.setProperty("Display", "none"); // > Initialization.Init Page:12
            _view.bottomPanel.setProperty("Width", 450); // > Initialization.Init Page:13
          } // > Initialization.Init Page:14
          t = 0; // > Initialization.Init Page:15
          x = _view.x_t.evaluate({ t: t }); // > Initialization.Init Page:16
          var x0 = _view.x_t.evaluate({ t: t - dt }); // > Initialization.Init Page:17
          var x00 = _view.x_t.evaluate({ t: t - 2 * dt }); // > Initialization.Init Page:18
          vx = (x - x0) / dt; // > Initialization.Init Page:19
          tethax = Math.atan2(x - x0, dt); // > Initialization.Init Page:20
          ax = (x - 2 * x0 + x00) / (dt * dt); // > Initialization.Init Page:21
          tethaax = Math.atan2(x - 2 * x0 + x00, dt * dt); // > Initialization.Init Page:22
          y = _view.y_t.evaluate({ t: t }); // > Initialization.Init Page:23
          var y0 = _view.y_t.evaluate({ t: t - dt }); // > Initialization.Init Page:24
          var y00 = _view.y_t.evaluate({ t: t - 2 * dt }); // > Initialization.Init Page:25
          vy = (y - y0) / dt; // > Initialization.Init Page:26
          tethay = Math.atan2(y - y0, dt); // > Initialization.Init Page:27
          ay = (y - 2 * y0 + y00) / (dt * dt); // > Initialization.Init Page:28
          tethaay = Math.atan2(y - 2 * y0 + y00, dt * dt); // > Initialization.Init Page:29
          vel = Math.sqrt(vx * vx + vy * vy); // > Initialization.Init Page:30
          acel = Math.sqrt(ax * ax + ay * ay); // > Initialization.Init Page:31
          _view.bottomPanel.setProperty("Width", 850); // > Initialization.Init Page:32
        });

        _model.addToEvolution(function () {
          if (!__pagesEnabled["Evol Page"]) return;
          _view._update(); // > Evolution.Evol Page:1
          t = t + dt; // > Evolution.Evol Page:2
          if (t > tmax) _pause(); // > Evolution.Evol Page:3
          x = _view.x_t.evaluate({ t: t }); // > Evolution.Evol Page:4
          var x0 = _view.x_t.evaluate({ t: t - dt }); // > Evolution.Evol Page:5
          var x00 = _view.x_t.evaluate({ t: t - 2 * dt }); // > Evolution.Evol Page:6
          vx = (x - x0) / dt; // > Evolution.Evol Page:7
          tethax = Math.atan2(x - x0, dt); // > Evolution.Evol Page:8
          ax = (x - 2 * x0 + x00) / (dt * dt); // > Evolution.Evol Page:9
          tethaax = Math.atan2(x - 2 * x0 + x00, dt * dt); // > Evolution.Evol Page:10
          y = _view.y_t.evaluate({ t: t }); // > Evolution.Evol Page:11
          var y0 = _view.y_t.evaluate({ t: t - dt }); // > Evolution.Evol Page:12
          var y00 = _view.y_t.evaluate({ t: t - 2 * dt }); // > Evolution.Evol Page:13
          vy = (y - y0) / dt; // > Evolution.Evol Page:14
          tethay = Math.atan2(y - y0, dt); // > Evolution.Evol Page:15
          tethaay = Math.atan2(y - 2 * y0 + y00, dt * dt); // > Evolution.Evol Page:16
          ay = (y - 2 * y0 + y00) / (dt * dt); // > Evolution.Evol Page:17
          vel = Math.sqrt(vx * vx + vy * vy); // > Evolution.Evol Page:18
          acel = Math.sqrt(ax * ax + ay * ay); // > Evolution.Evol Page:19
        });

        _model.addToFixedRelations(function () {
          _isPaused = _model.isPaused();
          _isPlaying = _model.isPlaying();
        });

        _model.addToFixedRelations(function () {
          if (!__pagesEnabled["Energy"]) return;
        });

        _model.addToFixedRelations(function () {
          _isPaused = _model.isPaused();
          _isPlaying = _model.isPlaying();
        });

        _model._fontResized = function (iBase, iSize, iDelta) {
          _view._fontResized(iBase, iSize, iDelta);
        }; // end of _fontResized

        function _getViews() {
          var _viewsInfo = [];
          var _counter = 0;
          _viewsInfo[_counter++] = {
            name: "HtmlView Page",
            width: 800,
            height: 800,
          };
          return _viewsInfo;
        } // end of _getViews

        function _selectView(_viewNumber) {
          _view = null;
          _view = new cinematica2Dv3_View(
            _topFrame,
            _viewNumber,
            _libraryPath,
            _codebasePath
          );
          var _view_super_reset = _view._reset;
          _view._reset = function () {
            _view_super_reset();
            switch (_viewNumber) {
              case -10:
                break; // make Lint happy
              default:
              case 0:
                _view.trajetoria.linkProperty(
                  "Height",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Height' for element 'trajetoria'
                _view.trajetoria.linkProperty(
                  "Width",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Width' for element 'trajetoria'
                _view.trajetoria.linkProperty("Title", function () {
                  return (
                    "t=" +
                    _view._format(t, "0.000") +
                    " (x,y)=(" +
                    _view._format(x, "0.00") +
                    ", " +
                    _view._format(y, "0.00") +
                    ")"
                  );
                }); // HtmlView Page linking property 'Title' for element 'trajetoria'
                _view.trajetoria.linkProperty(
                  "MaximumY",
                  function () {
                    return ymax;
                  },
                  function (_v) {
                    ymax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumY' for element 'trajetoria'
                _view.trajetoria.linkProperty(
                  "MaximumX",
                  function () {
                    return xmax;
                  },
                  function (_v) {
                    xmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumX' for element 'trajetoria'
                _view.trajetoria.linkProperty(
                  "MinimumX",
                  function () {
                    return xmin;
                  },
                  function (_v) {
                    xmin = _v;
                  }
                ); // HtmlView Page linking property 'MinimumX' for element 'trajetoria'
                _view.trajetoria.linkProperty(
                  "MinimumY",
                  function () {
                    return ymin;
                  },
                  function (_v) {
                    ymin = _v;
                  }
                ); // HtmlView Page linking property 'MinimumY' for element 'trajetoria'
                _view.trail.linkProperty(
                  "InputX",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'trail'
                _view.trail.linkProperty(
                  "Visibility",
                  function () {
                    return showTraj;
                  },
                  function (_v) {
                    showTraj = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'trail'
                _view.trail.linkProperty(
                  "InputY",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'trail'
                _view.shape.linkProperty(
                  "X",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'shape'
                _view.shape.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'shape'
                _view.acel.linkProperty("SizeX", function () {
                  return 0.05 * ax;
                }); // HtmlView Page linking property 'SizeX' for element 'acel'
                _view.acel.linkProperty(
                  "X",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'acel'
                _view.acel.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'acel'
                _view.acel.linkProperty(
                  "Visibility",
                  function () {
                    return showAcel;
                  },
                  function (_v) {
                    showAcel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'acel'
                _view.acel.linkProperty("SizeY", function () {
                  return 0.05 * ay;
                }); // HtmlView Page linking property 'SizeY' for element 'acel'
                _view.vel.linkProperty("SizeX", function () {
                  return 0.1 * vx;
                }); // HtmlView Page linking property 'SizeX' for element 'vel'
                _view.vel.linkProperty(
                  "X",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vel'
                _view.vel.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vel'
                _view.vel.linkProperty(
                  "Visibility",
                  function () {
                    return showVel;
                  },
                  function (_v) {
                    showVel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vel'
                _view.vel.linkProperty("SizeY", function () {
                  return 0.1 * vy;
                }); // HtmlView Page linking property 'SizeY' for element 'vel'
                _view.pos.linkProperty(
                  "SizeX",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'SizeX' for element 'pos'
                _view.pos.linkProperty(
                  "Visibility",
                  function () {
                    return showPos;
                  },
                  function (_v) {
                    showPos = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'pos'
                _view.pos.linkProperty(
                  "SizeY",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'SizeY' for element 'pos'
                _view.xLine.linkProperty("SizeX", function () {
                  return -x;
                }); // HtmlView Page linking property 'SizeX' for element 'xLine'
                _view.xLine.linkProperty(
                  "X",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'xLine'
                _view.xLine.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'xLine'
                _view.xLine.linkProperty(
                  "Visibility",
                  function () {
                    return showPos;
                  },
                  function (_v) {
                    showPos = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'xLine'
                _view.yLine.linkProperty(
                  "X",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'yLine'
                _view.yLine.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'yLine'
                _view.yLine.linkProperty(
                  "Visibility",
                  function () {
                    return showPos;
                  },
                  function (_v) {
                    showPos = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'yLine'
                _view.yLine.linkProperty("SizeY", function () {
                  return -y;
                }); // HtmlView Page linking property 'SizeY' for element 'yLine'
                _view.xaxis.linkProperty("SizeX", function () {
                  return xmax - xmin;
                }); // HtmlView Page linking property 'SizeX' for element 'xaxis'
                _view.xaxis.linkProperty(
                  "X",
                  function () {
                    return xmin;
                  },
                  function (_v) {
                    xmin = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'xaxis'
                _view.yaxis.linkProperty(
                  "Y",
                  function () {
                    return ymin;
                  },
                  function (_v) {
                    ymin = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'yaxis'
                _view.yaxis.linkProperty("SizeY", function () {
                  return ymax - ymin;
                }); // HtmlView Page linking property 'SizeY' for element 'yaxis'
                _view.x_time.linkProperty(
                  "Height",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Height' for element 'x_time'
                _view.x_time.linkProperty(
                  "Width",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Width' for element 'x_time'
                _view.x_time.linkProperty("Title", function () {
                  return (
                    "t=" +
                    _view._format(t, "0.000") +
                    " x = " +
                    _view._format(x, "0.00")
                  );
                }); // HtmlView Page linking property 'Title' for element 'x_time'
                _view.x_time.setAction(
                  "OnDoubleClick",
                  function (_data, _info) {
                    pi_selected = false;
                    pf_selected = false;
                  }
                ); // HtmlView Page setting action 'OnDoubleClick' for element 'x_time'
                _view.x_time.linkProperty(
                  "MaximumY",
                  function () {
                    return xmax;
                  },
                  function (_v) {
                    xmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumY' for element 'x_time'
                _view.x_time.linkProperty(
                  "MaximumX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumX' for element 'x_time'
                _view.x_time.linkProperty(
                  "MinimumY",
                  function () {
                    return xmin;
                  },
                  function (_v) {
                    xmin = _v;
                  }
                ); // HtmlView Page linking property 'MinimumY' for element 'x_time'
                _view.x_time.linkProperty(
                  "Visibility",
                  function () {
                    return showPosPlt;
                  },
                  function (_v) {
                    showPosPlt = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'x_time'
                _view.x_time.setAction("OnPress", function (_data, _info) {
                  comp_x();
                }); // HtmlView Page setting action 'OnPress' for element 'x_time'
                _view.xTrail.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'xTrail'
                _view.xTrail.linkProperty(
                  "InputY",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'xTrail'
                _view.point.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point'
                _view.point.linkProperty(
                  "Y",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point'
                _view.corda.linkProperty("SizeX", function () {
                  return tff - tii;
                }); // HtmlView Page linking property 'SizeX' for element 'corda'
                _view.corda.linkProperty(
                  "X",
                  function () {
                    return tii;
                  },
                  function (_v) {
                    tii = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'corda'
                _view.corda.linkProperty(
                  "Y",
                  function () {
                    return xii;
                  },
                  function (_v) {
                    xii = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'corda'
                _view.corda.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'corda'
                _view.corda.linkProperty("SizeY", function () {
                  return xff - xii;
                }); // HtmlView Page linking property 'SizeY' for element 'corda'
                _view.vertical3.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical3'
                _view.vertical3.linkProperty(
                  "Y",
                  function () {
                    return xf;
                  },
                  function (_v) {
                    xf = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical3'
                _view.vertical3.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical3'
                _view.vertical3.linkProperty("SizeY", function () {
                  return -(xf - xi);
                }); // HtmlView Page linking property 'SizeY' for element 'vertical3'
                _view.vertical2.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical2'
                _view.vertical2.linkProperty(
                  "Y",
                  function () {
                    return xi;
                  },
                  function (_v) {
                    xi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical2'
                _view.vertical2.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical2'
                _view.vertical2.linkProperty("SizeY", function () {
                  return -xi - 10;
                }); // HtmlView Page linking property 'SizeY' for element 'vertical2'
                _view.vertical1.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical1'
                _view.vertical1.linkProperty(
                  "Y",
                  function () {
                    return xi;
                  },
                  function (_v) {
                    xi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical1'
                _view.vertical1.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical1'
                _view.vertical1.linkProperty("SizeY", function () {
                  return -xi - 10;
                }); // HtmlView Page linking property 'SizeY' for element 'vertical1'
                _view.horizontal1.linkProperty("SizeX", function () {
                  return tf - ti;
                }); // HtmlView Page linking property 'SizeX' for element 'horizontal1'
                _view.horizontal1.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'horizontal1'
                _view.horizontal1.linkProperty(
                  "Y",
                  function () {
                    return xi;
                  },
                  function (_v) {
                    xi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'horizontal1'
                _view.horizontal1.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'horizontal1'
                _view.tan.linkProperty("SizeX", function () {
                  return 0.5 * Math.cos(tethax);
                }); // HtmlView Page linking property 'SizeX' for element 'tan'
                _view.tan.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tan'
                _view.tan.linkProperty(
                  "Y",
                  function () {
                    return x;
                  },
                  function (_v) {
                    x = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'tan'
                _view.tan.linkProperty(
                  "Visibility",
                  function () {
                    return showVel;
                  },
                  function (_v) {
                    showVel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tan'
                _view.tan.linkProperty("SizeY", function () {
                  return 0.5 * Math.sin(tethax);
                }); // HtmlView Page linking property 'SizeY' for element 'tan'
                _view.vmed.linkProperty("X", function () {
                  return tf - 0.05;
                }); // HtmlView Page linking property 'X' for element 'vmed'
                _view.vmed.linkProperty("Y", function () {
                  return xi + 0.5;
                }); // HtmlView Page linking property 'Y' for element 'vmed'
                _view.vmed.linkProperty("Text", function () {
                  return _view._format(vmedx, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'vmed'
                _view.vmed.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'vmed'
                _view.deltax.linkProperty("X", function () {
                  return tf + 0.05;
                }); // HtmlView Page linking property 'X' for element 'deltax'
                _view.deltax.linkProperty("Y", function () {
                  return 0.5 * (xf + xi);
                }); // HtmlView Page linking property 'Y' for element 'deltax'
                _view.deltax.linkProperty("Text", function () {
                  return _view._format(xf - xi, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'deltax'
                _view.deltax.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'deltax'
                _view.deltat.linkProperty("X", function () {
                  return 0.5 * (tf + ti);
                }); // HtmlView Page linking property 'X' for element 'deltat'
                _view.deltat.linkProperty("Y", function () {
                  return xi - 0.2;
                }); // HtmlView Page linking property 'Y' for element 'deltat'
                _view.deltat.linkProperty("Text", function () {
                  return _view._format(tf - ti, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'deltat'
                _view.deltat.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'deltat'
                _view.tf.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tf'
                _view.tf.linkProperty("Text", function () {
                  return _view._format(tf, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'tf'
                _view.tf.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tf'
                _view.ti.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'ti'
                _view.ti.linkProperty("Text", function () {
                  return _view._format(ti, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'ti'
                _view.ti.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'ti'
                _view.pf.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'pf'
                _view.pf.linkProperty(
                  "Y",
                  function () {
                    return xf;
                  },
                  function (_v) {
                    xf = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'pf'
                _view.pf.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'pf'
                _view.pf.setAction("OnDrag", function (_data, _info) {
                  drag_pfx();
                }); // HtmlView Page setting action 'OnDrag' for element 'pf'
                _view.pi.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'pi'
                _view.pi.linkProperty(
                  "Y",
                  function () {
                    return xi;
                  },
                  function (_v) {
                    xi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'pi'
                _view.pi.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'pi'
                _view.pi.setAction("OnDrag", function (_data, _info) {
                  drag_pix();
                }); // HtmlView Page setting action 'OnDrag' for element 'pi'
                _view.taxis.linkProperty(
                  "SizeX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'SizeX' for element 'taxis'
                _view.y_time.linkProperty(
                  "Height",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Height' for element 'y_time'
                _view.y_time.linkProperty(
                  "Width",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Width' for element 'y_time'
                _view.y_time.linkProperty("Title", function () {
                  return (
                    "t=" +
                    _view._format(t, "0.000") +
                    " y = " +
                    _view._format(y, "0.00")
                  );
                }); // HtmlView Page linking property 'Title' for element 'y_time'
                _view.y_time.setAction(
                  "OnDoubleClick",
                  function (_data, _info) {
                    pi_selected = false;
                    pf_selected = false;
                  }
                ); // HtmlView Page setting action 'OnDoubleClick' for element 'y_time'
                _view.y_time.linkProperty(
                  "MaximumY",
                  function () {
                    return ymax;
                  },
                  function (_v) {
                    ymax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumY' for element 'y_time'
                _view.y_time.linkProperty(
                  "MaximumX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumX' for element 'y_time'
                _view.y_time.linkProperty(
                  "MinimumY",
                  function () {
                    return ymin;
                  },
                  function (_v) {
                    ymin = _v;
                  }
                ); // HtmlView Page linking property 'MinimumY' for element 'y_time'
                _view.y_time.linkProperty(
                  "Visibility",
                  function () {
                    return showPosPlt;
                  },
                  function (_v) {
                    showPosPlt = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'y_time'
                _view.y_time.setAction("OnPress", function (_data, _info) {
                  comp_x();
                }); // HtmlView Page setting action 'OnPress' for element 'y_time'
                _view.xTrail2.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'xTrail2'
                _view.xTrail2.linkProperty(
                  "InputY",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'xTrail2'
                _view.point3.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point3'
                _view.point3.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point3'
                _view.corda2.linkProperty("SizeX", function () {
                  return tff - tii;
                }); // HtmlView Page linking property 'SizeX' for element 'corda2'
                _view.corda2.linkProperty(
                  "X",
                  function () {
                    return tii;
                  },
                  function (_v) {
                    tii = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'corda2'
                _view.corda2.linkProperty(
                  "Y",
                  function () {
                    return yii;
                  },
                  function (_v) {
                    yii = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'corda2'
                _view.corda2.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'corda2'
                _view.corda2.linkProperty("SizeY", function () {
                  return yff - yii;
                }); // HtmlView Page linking property 'SizeY' for element 'corda2'
                _view.vertical32.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical32'
                _view.vertical32.linkProperty(
                  "Y",
                  function () {
                    return yf;
                  },
                  function (_v) {
                    yf = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical32'
                _view.vertical32.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical32'
                _view.vertical32.linkProperty("SizeY", function () {
                  return -(yf - yi);
                }); // HtmlView Page linking property 'SizeY' for element 'vertical32'
                _view.vertical22.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical22'
                _view.vertical22.linkProperty(
                  "Y",
                  function () {
                    return yi;
                  },
                  function (_v) {
                    yi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical22'
                _view.vertical22.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical22'
                _view.vertical22.linkProperty("SizeY", function () {
                  return -yi - 10;
                }); // HtmlView Page linking property 'SizeY' for element 'vertical22'
                _view.vertical12.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'vertical12'
                _view.vertical12.linkProperty(
                  "Y",
                  function () {
                    return yi;
                  },
                  function (_v) {
                    yi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'vertical12'
                _view.vertical12.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'vertical12'
                _view.vertical12.linkProperty("SizeY", function () {
                  return -yi - 10;
                }); // HtmlView Page linking property 'SizeY' for element 'vertical12'
                _view.horizontal12.linkProperty("SizeX", function () {
                  return tf - ti;
                }); // HtmlView Page linking property 'SizeX' for element 'horizontal12'
                _view.horizontal12.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'horizontal12'
                _view.horizontal12.linkProperty(
                  "Y",
                  function () {
                    return yi;
                  },
                  function (_v) {
                    yi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'horizontal12'
                _view.horizontal12.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'horizontal12'
                _view.tan2.linkProperty("SizeX", function () {
                  return 0.5 * Math.cos(tethay);
                }); // HtmlView Page linking property 'SizeX' for element 'tan2'
                _view.tan2.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tan2'
                _view.tan2.linkProperty(
                  "Y",
                  function () {
                    return y;
                  },
                  function (_v) {
                    y = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'tan2'
                _view.tan2.linkProperty(
                  "Visibility",
                  function () {
                    return showVel;
                  },
                  function (_v) {
                    showVel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tan2'
                _view.tan2.linkProperty("SizeY", function () {
                  return 0.5 * Math.sin(tethay);
                }); // HtmlView Page linking property 'SizeY' for element 'tan2'
                _view.vmed2.linkProperty("X", function () {
                  return tf - 0.05;
                }); // HtmlView Page linking property 'X' for element 'vmed2'
                _view.vmed2.linkProperty("Y", function () {
                  return yi + 0.5;
                }); // HtmlView Page linking property 'Y' for element 'vmed2'
                _view.vmed2.linkProperty("Text", function () {
                  return _view._format(vmedy, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'vmed2'
                _view.vmed2.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'vmed2'
                _view.deltax2.linkProperty("X", function () {
                  return tf + 0.05;
                }); // HtmlView Page linking property 'X' for element 'deltax2'
                _view.deltax2.linkProperty("Y", function () {
                  return 0.5 * (yf + yi);
                }); // HtmlView Page linking property 'Y' for element 'deltax2'
                _view.deltax2.linkProperty("Text", function () {
                  return _view._format(yf - yi, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'deltax2'
                _view.deltax2.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'deltax2'
                _view.deltat2.linkProperty("X", function () {
                  return 0.5 * (tf + ti);
                }); // HtmlView Page linking property 'X' for element 'deltat2'
                _view.deltat2.linkProperty("Y", function () {
                  return yi - 0.2;
                }); // HtmlView Page linking property 'Y' for element 'deltat2'
                _view.deltat2.linkProperty("Text", function () {
                  return _view._format(tf - ti, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'deltat2'
                _view.deltat2.linkProperty("Visibility", function () {
                  return pi_selected && pf_selected;
                }); // HtmlView Page linking property 'Visibility' for element 'deltat2'
                _view.tf2.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tf2'
                _view.tf2.linkProperty("Text", function () {
                  return _view._format(tf, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'tf2'
                _view.tf2.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tf2'
                _view.ti2.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'ti2'
                _view.ti2.linkProperty("Text", function () {
                  return _view._format(ti, "0.00");
                }); // HtmlView Page linking property 'Text' for element 'ti2'
                _view.ti2.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'ti2'
                _view.pf2.linkProperty(
                  "X",
                  function () {
                    return tf;
                  },
                  function (_v) {
                    tf = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'pf2'
                _view.pf2.linkProperty(
                  "Y",
                  function () {
                    return yf;
                  },
                  function (_v) {
                    yf = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'pf2'
                _view.pf2.linkProperty(
                  "Visibility",
                  function () {
                    return pf_selected;
                  },
                  function (_v) {
                    pf_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'pf2'
                _view.pf2.setAction("OnDrag", function (_data, _info) {
                  drag_pfx();
                }); // HtmlView Page setting action 'OnDrag' for element 'pf2'
                _view.pi2.linkProperty(
                  "X",
                  function () {
                    return ti;
                  },
                  function (_v) {
                    ti = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'pi2'
                _view.pi2.linkProperty(
                  "Y",
                  function () {
                    return yi;
                  },
                  function (_v) {
                    yi = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'pi2'
                _view.pi2.linkProperty(
                  "Visibility",
                  function () {
                    return pi_selected;
                  },
                  function (_v) {
                    pi_selected = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'pi2'
                _view.pi2.setAction("OnDrag", function (_data, _info) {
                  drag_pix();
                }); // HtmlView Page setting action 'OnDrag' for element 'pi2'
                _view.taxis2.linkProperty(
                  "SizeX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'SizeX' for element 'taxis2'
                _view.velocity_time.linkProperty(
                  "Height",
                  function () {
                    return plotsize2;
                  },
                  function (_v) {
                    plotsize2 = _v;
                  }
                ); // HtmlView Page linking property 'Height' for element 'velocity_time'
                _view.velocity_time.linkProperty(
                  "Width",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Width' for element 'velocity_time'
                _view.velocity_time.linkProperty("Title", function () {
                  return (
                    "t=" +
                    _view._format(t, "0.000") +
                    " (vx,vy)=(" +
                    _view._format(vx, "0.00") +
                    ", " +
                    _view._format(vy, "0.00") +
                    ")"
                  );
                }); // HtmlView Page linking property 'Title' for element 'velocity_time'
                _view.velocity_time.linkProperty(
                  "MaximumX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumX' for element 'velocity_time'
                _view.velocity_time.linkProperty(
                  "Visibility",
                  function () {
                    return showVelPlt;
                  },
                  function (_v) {
                    showVelPlt = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'velocity_time'
                _view.vy.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'vy'
                _view.vy.linkProperty(
                  "InputY",
                  function () {
                    return vy;
                  },
                  function (_v) {
                    vy = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'vy'
                _view.vx.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'vx'
                _view.vx.linkProperty(
                  "InputY",
                  function () {
                    return vx;
                  },
                  function (_v) {
                    vx = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'vx'
                _view.vel2.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'vel2'
                _view.vel2.linkProperty(
                  "InputY",
                  function () {
                    return vel;
                  },
                  function (_v) {
                    vel = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'vel2'
                _view.point22.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point22'
                _view.point22.linkProperty(
                  "Y",
                  function () {
                    return vy;
                  },
                  function (_v) {
                    vy = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point22'
                _view.point2.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point2'
                _view.point2.linkProperty(
                  "Y",
                  function () {
                    return vx;
                  },
                  function (_v) {
                    vx = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point2'
                _view.tan222.linkProperty("SizeX", function () {
                  return 2.0 * Math.cos(tethaax);
                }); // HtmlView Page linking property 'SizeX' for element 'tan222'
                _view.tan222.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tan222'
                _view.tan222.linkProperty(
                  "Y",
                  function () {
                    return vx;
                  },
                  function (_v) {
                    vx = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'tan222'
                _view.tan222.linkProperty(
                  "Visibility",
                  function () {
                    return showAcel;
                  },
                  function (_v) {
                    showAcel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tan222'
                _view.tan222.linkProperty("SizeY", function () {
                  return 2.0 * Math.sin(tethaax);
                }); // HtmlView Page linking property 'SizeY' for element 'tan222'
                _view.tan22.linkProperty("SizeX", function () {
                  return 1.0 * Math.cos(tethaay);
                }); // HtmlView Page linking property 'SizeX' for element 'tan22'
                _view.tan22.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'tan22'
                _view.tan22.linkProperty(
                  "Y",
                  function () {
                    return vy;
                  },
                  function (_v) {
                    vy = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'tan22'
                _view.tan22.linkProperty(
                  "Visibility",
                  function () {
                    return showAcel;
                  },
                  function (_v) {
                    showAcel = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'tan22'
                _view.tan22.linkProperty("SizeY", function () {
                  return 1.0 * Math.sin(tethaay);
                }); // HtmlView Page linking property 'SizeY' for element 'tan22'
                _view.acel_time.linkProperty(
                  "Height",
                  function () {
                    return plotsize2;
                  },
                  function (_v) {
                    plotsize2 = _v;
                  }
                ); // HtmlView Page linking property 'Height' for element 'acel_time'
                _view.acel_time.linkProperty(
                  "Width",
                  function () {
                    return plotsize;
                  },
                  function (_v) {
                    plotsize = _v;
                  }
                ); // HtmlView Page linking property 'Width' for element 'acel_time'
                _view.acel_time.linkProperty(
                  "Enabled",
                  function () {
                    return showAcel;
                  },
                  function (_v) {
                    showAcel = _v;
                  }
                ); // HtmlView Page linking property 'Enabled' for element 'acel_time'
                _view.acel_time.linkProperty("Title", function () {
                  return (
                    "t=" +
                    _view._format(t, "0.000") +
                    " (ax,ay)=(" +
                    _view._format(ax, "0.00") +
                    ", " +
                    _view._format(ay, "0.00") +
                    ")"
                  );
                }); // HtmlView Page linking property 'Title' for element 'acel_time'
                _view.acel_time.linkProperty(
                  "MaximumX",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'MaximumX' for element 'acel_time'
                _view.acel_time.linkProperty(
                  "Visibility",
                  function () {
                    return showAcelPlt;
                  },
                  function (_v) {
                    showAcelPlt = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'acel_time'
                _view.ay.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'ay'
                _view.ay.linkProperty(
                  "InputY",
                  function () {
                    return ay;
                  },
                  function (_v) {
                    ay = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'ay'
                _view.ax.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'ax'
                _view.ax.linkProperty(
                  "InputY",
                  function () {
                    return ax;
                  },
                  function (_v) {
                    ax = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'ax'
                _view.acel2.linkProperty(
                  "InputX",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'InputX' for element 'acel2'
                _view.acel2.linkProperty(
                  "InputY",
                  function () {
                    return acel;
                  },
                  function (_v) {
                    acel = _v;
                  }
                ); // HtmlView Page linking property 'InputY' for element 'acel2'
                _view.point222.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point222'
                _view.point222.linkProperty(
                  "Y",
                  function () {
                    return ay;
                  },
                  function (_v) {
                    ay = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point222'
                _view.point23.linkProperty(
                  "X",
                  function () {
                    return t;
                  },
                  function (_v) {
                    t = _v;
                  }
                ); // HtmlView Page linking property 'X' for element 'point23'
                _view.point23.linkProperty(
                  "Y",
                  function () {
                    return ax;
                  },
                  function (_v) {
                    ax = _v;
                  }
                ); // HtmlView Page linking property 'Y' for element 'point23'
                _view.functionPanel.linkProperty(
                  "Visibility",
                  function () {
                    return showEqs;
                  },
                  function (_v) {
                    showEqs = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'functionPanel'
                _view.x_t.linkProperty(
                  "Value",
                  function () {
                    return function_x_t;
                  },
                  function (_v) {
                    function_x_t = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'x_t'
                _view.x_t.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'x_t'
                _view.y_t.linkProperty(
                  "Value",
                  function () {
                    return function_y_t;
                  },
                  function (_v) {
                    function_y_t = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'y_t'
                _view.y_t.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'y_t'
                _view.functionPanel2.linkProperty(
                  "Visibility",
                  function () {
                    return showEqs;
                  },
                  function (_v) {
                    showEqs = _v;
                  }
                ); // HtmlView Page linking property 'Visibility' for element 'functionPanel2'
                _view.xmin.linkProperty(
                  "Value",
                  function () {
                    return xmin;
                  },
                  function (_v) {
                    xmin = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'xmin'
                _view.xmax.linkProperty(
                  "Value",
                  function () {
                    return xmax;
                  },
                  function (_v) {
                    xmax = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'xmax'
                _view.ymin.linkProperty(
                  "Value",
                  function () {
                    return ymin;
                  },
                  function (_v) {
                    ymin = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'ymin'
                _view.ymax.linkProperty(
                  "Value",
                  function () {
                    return ymax;
                  },
                  function (_v) {
                    ymax = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'ymax'
                _view.tmax.linkProperty(
                  "Value",
                  function () {
                    return tmax;
                  },
                  function (_v) {
                    tmax = _v;
                  }
                ); // HtmlView Page linking property 'Value' for element 'tmax'
                _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
                _view.playPauseButton.linkProperty("State", function () {
                  return _isPaused;
                }); // HtmlView Page linking property 'State' for element 'playPauseButton'
                _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
                _view.stepButton.setAction("OnClick", function (_data, _info) {
                  _step();
                }); // HtmlView Page setting action 'OnClick' for element 'stepButton'
                _view.stepback.setAction("OnClick", stepBack2); // HtmlView Page setting action 'OnClick' for element 'stepback'
                _view.resetButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'resetButton'
                _view.showTraj.linkProperty(
                  "Checked",
                  function () {
                    return showTraj;
                  },
                  function (_v) {
                    showTraj = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showTraj'
                _view.showTraj.setAction("OnCheckOff", set_x_time_off); // HtmlView Page setting action 'OnCheckOff' for element 'showTraj'
                _view.showTraj.setAction("OnCheckOn", set_x_time_on); // HtmlView Page setting action 'OnCheckOn' for element 'showTraj'
                _view.showPosVec.linkProperty(
                  "Checked",
                  function () {
                    return showPos;
                  },
                  function (_v) {
                    showPos = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showPosVec'
                _view.showPosVec.setAction("OnCheckOff", set_x_time_off); // HtmlView Page setting action 'OnCheckOff' for element 'showPosVec'
                _view.showPosVec.setAction("OnCheckOn", set_x_time_on); // HtmlView Page setting action 'OnCheckOn' for element 'showPosVec'
                _view.showPlotPos.linkProperty(
                  "Checked",
                  function () {
                    return showPosPlt;
                  },
                  function (_v) {
                    showPosPlt = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showPlotPos'
                _view.showPlotPos.setAction("OnCheckOff", set_x_time_off); // HtmlView Page setting action 'OnCheckOff' for element 'showPlotPos'
                _view.showPlotPos.setAction("OnCheckOn", set_x_time_on); // HtmlView Page setting action 'OnCheckOn' for element 'showPlotPos'
                _view.showVelVec.linkProperty(
                  "Checked",
                  function () {
                    return showVel;
                  },
                  function (_v) {
                    showVel = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showVelVec'
                _view.showPlotVelocity.linkProperty(
                  "Checked",
                  function () {
                    return showVelPlt;
                  },
                  function (_v) {
                    showVelPlt = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showPlotVelocity'
                _view.showPlotVelocity.setAction("OnCheckOff", set_v_time_off); // HtmlView Page setting action 'OnCheckOff' for element 'showPlotVelocity'
                _view.showPlotVelocity.setAction("OnCheckOn", set_v_time_on); // HtmlView Page setting action 'OnCheckOn' for element 'showPlotVelocity'
                _view.showAcelVec.linkProperty(
                  "Checked",
                  function () {
                    return showAcel;
                  },
                  function (_v) {
                    showAcel = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showAcelVec'
                _view.showPlotAcel.linkProperty(
                  "Checked",
                  function () {
                    return showAcelPlt;
                  },
                  function (_v) {
                    showAcelPlt = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showPlotAcel'
                _view.showPlotAcel.setAction("OnCheckOff", set_a_time_off); // HtmlView Page setting action 'OnCheckOff' for element 'showPlotAcel'
                _view.showPlotAcel.setAction("OnCheckOn", set_a_time_on); // HtmlView Page setting action 'OnCheckOn' for element 'showPlotAcel'
                _view.showEqs.linkProperty(
                  "Checked",
                  function () {
                    return showEqs;
                  },
                  function (_v) {
                    showEqs = _v;
                  }
                ); // HtmlView Page linking property 'Checked' for element 'showEqs'
                _view.showEqs.setAction("OnCheckOff", function (_data, _info) {
                  _view.functionPanel.setProperty("Display", "none");
                }); // HtmlView Page setting action 'OnCheckOff' for element 'showEqs'
                _view.showEqs.setAction("OnCheckOn", function (_data, _info) {
                  _view.functionPanel.setProperty("Display", "");
                }); // HtmlView Page setting action 'OnCheckOn' for element 'showEqs'
                break;
            } // end of switch
          }; // end of new reset

          _model.setView(_view);
          _model.reset();
          _view._enableEPub();
        } // end of _selectView

        _model.setAutoplay(false);
        _model.setFPS(24);
        _model.setStepsPerDisplay(2);
        _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
        return _model;
      }

      function cinematica2Dv3_View(
        _topFrame,
        _viewNumber,
        _libraryPath,
        _codebasePath
      ) {
        var _view;
        switch (_viewNumber) {
          case -10:
            break; // make Lint happy
          default:
          case 0:
            _view = cinematica2Dv3_View_0(_topFrame);
            break;
        } // end of switch

        if (_codebasePath) _view._setResourcePath(_codebasePath);

        if (_libraryPath) _view._setLibraryPath(_libraryPath);

        _view._addDescriptionPage(
          "Introdu√ß√£o",
          "./cinematica2Dv3_Intro_1.html"
        );

        return _view;
      } // end of main function

      function cinematica2Dv3_View_0(_topFrame) {
        var _view = EJSS_CORE.createView(_topFrame);

        _view._reset = function () {
          _view._clearAll();
          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "SimulationPanel",
              _view._topFrame
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'SimulationPanel'
            .setProperty("CSS", {
              "page-break-inside": "avoid",
              display: "table",
              "table-layout": "auto",
              "margin-left": "auto",
              "margin-right": "auto",
              border: "none",
              padding: "0px",
              "vertical-align": "top",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'SimulationPanel'

          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "centerPanel",
              _view.SimulationPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
            .setProperty("CSS", {
              display: "block",
              "vertical-align": "center",
              "margin-left": "1.0cm",
              "margin-right": "1.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0.25",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'centerPanel'

          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "panel_trajetoria",
              _view.centerPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'panel_trajetoria'
            .setProperty("CSS", {
              display: "block",
              "margin-left": "0.0cm",
              "margin-right": "0.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0px",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel_trajetoria'

          _view
            ._addElement(
              EJSS_DRAWING2D.plottingPanel,
              "trajetoria",
              _view.panel_trajetoria
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'trajetoria'
            .setProperty("CSS", { "vertical-align": "center" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'trajetoria'
            .setProperty("XFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'trajetoria'
            .setProperty("AxisXShow", true) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'trajetoria'
            .setProperty("SquareAspect", false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'trajetoria'
            .setProperty("YFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'trajetoria'
            .setProperty("AxisYShow", true) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'trajetoria'
            .setProperty("TitleY", "y(m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'trajetoria'
            .setProperty("TitleX", "x(m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'trajetoria'
            .setProperty("AutoScaleY", true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'trajetoria'
            .setProperty("AutoScaleX", true); // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'trajetoria'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "trail", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
            .setProperty("LineColor", "DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
            .setProperty("NoRepeat", true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "shape", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
            .setProperty("FillColor", "rgba(200,150,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
            .setProperty("SizeX", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
            .setProperty("SizeY", 10); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'

          _view
            ._addElement(EJSS_DRAWING2D.arrow, "acel", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'acel'
            .setProperty("LineColor", "Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acel'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'acel'

          _view
            ._addElement(EJSS_DRAWING2D.arrow, "vel", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'vel'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vel'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vel'

          _view
            ._addElement(EJSS_DRAWING2D.arrow, "pos", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'pos'
            .setProperty("LineColor", "Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pos'
            .setProperty("X", 0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'pos'
            .setProperty("Y", 0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'pos'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'pos'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "xLine", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'xLine'
            .setProperty("LineColor", "Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xLine'
            .setProperty("SizeY", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xLine'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "yLine", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'yLine'
            .setProperty("SizeX", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yLine'
            .setProperty("LineColor", "Red"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yLine'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "xaxis", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'xaxis'
            .setProperty("Y", 0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xaxis'
            .setProperty("SizeY", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xaxis'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "yaxis", _view.trajetoria) // EJsS HtmlView.HtmlView Page: declaration of element 'yaxis'
            .setProperty("SizeX", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yaxis'
            .setProperty("X", 0); // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yaxis'

          _view
            ._addElement(
              EJSS_DRAWING2D.plottingPanel,
              "x_time",
              _view.panel_trajetoria
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'x_time'
            .setProperty("XFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'x_time'
            .setProperty("Enabled", true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'x_time'
            .setProperty("SquareAspect", false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'x_time'
            .setProperty("YFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'x_time'
            .setProperty("MinimumX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'x_time'
            .setProperty("TitleY", "x (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'x_time'
            .setProperty("TitleX", "t (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'x_time'
            .setProperty("AutoScaleY", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'x_time'
            .setProperty("AutoScaleX", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'x_time'
            .setProperty("MarginX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'x_time'
            .setProperty("MarginY", 0) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'x_time'
            .setProperty("TitleColor", "rgba(null)"); // EJsS HtmlView.HtmlView Page: setting property 'TitleColor' for element 'x_time'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "xTrail", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'xTrail'
            .setProperty("LineColor", "Blue"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xTrail'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point'

          _view._addElement(EJSS_DRAWING2D.segment, "corda", _view.x_time); // EJsS HtmlView.HtmlView Page: declaration of element 'corda'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical3", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical3'
            .setProperty("SizeX", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical3'
            .setProperty("LineColor", "Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vertical3'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vertical3'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical2", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical2'
            .setProperty("SizeX", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical2'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical1", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical1'
            .setProperty("SizeX", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical1'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "horizontal1", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'horizontal1'
            .setProperty("LineColor", "Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'horizontal1'
            .setProperty("SizeY", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'horizontal1'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'horizontal1'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "tan", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tan'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tan'
            .setProperty("LineWidth", 2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tan'
            .setProperty("Offset", "CENTERED"); // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'tan'

          _view
            ._addElement(EJSS_DRAWING2D.text, "vmed", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vmed'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vmed'
            .setProperty("RelativePosition", "NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'vmed'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vmed'
            .setProperty("Font", "normal normal 11px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'vmed'

          _view
            ._addElement(EJSS_DRAWING2D.text, "deltax", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'deltax'
            .setProperty("RelativePosition", "WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'deltax'
            .setProperty("Font", "normal normal 12px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'deltax'

          _view
            ._addElement(EJSS_DRAWING2D.text, "deltat", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'deltat'
            .setProperty("RelativePosition", "NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'deltat'
            .setProperty("Font", "normal normal 12px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'deltat'

          _view
            ._addElement(EJSS_DRAWING2D.text, "tf", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tf'
            .setProperty("RelativePosition", "SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'tf'
            .setProperty("Y", -9.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tf'
            .setProperty("Font", "normal normal 6px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'tf'

          _view
            ._addElement(EJSS_DRAWING2D.text, "ti", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'ti'
            .setProperty("RelativePosition", "SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ti'
            .setProperty("Y", -9.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ti'
            .setProperty("Font", "normal normal 6px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'ti'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "pf", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'pf'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pf'
            .setProperty("SizeX", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pf'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pf'
            .setProperty("SizeY", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pf'
            .setProperty("EnabledPosition", "ENABLED_X"); // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'pf'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "pi", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'pi'
            .setProperty("SizeX", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pi'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pi'
            .setProperty("SizeY", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pi'
            .setProperty("EnabledPosition", "ENABLED_X"); // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'pi'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "taxis", _view.x_time) // EJsS HtmlView.HtmlView Page: declaration of element 'taxis'
            .setProperty("X", 0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'taxis'
            .setProperty("Y", 0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'taxis'
            .setProperty("SizeY", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'taxis'

          _view
            ._addElement(
              EJSS_DRAWING2D.plottingPanel,
              "y_time",
              _view.panel_trajetoria
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'y_time'
            .setProperty("XFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'y_time'
            .setProperty("Enabled", true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'y_time'
            .setProperty("SquareAspect", false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'y_time'
            .setProperty("YFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'y_time'
            .setProperty("MinimumX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'y_time'
            .setProperty("TitleY", "y (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'y_time'
            .setProperty("TitleX", "t (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'y_time'
            .setProperty("AutoScaleY", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'y_time'
            .setProperty("AutoScaleX", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'y_time'
            .setProperty("MarginX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'y_time'
            .setProperty("MarginY", 0) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'y_time'
            .setProperty("TitleColor", "rgba(null)"); // EJsS HtmlView.HtmlView Page: setting property 'TitleColor' for element 'y_time'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "xTrail2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'xTrail2'
            .setProperty("LineColor", "Red"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xTrail2'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point3", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point3'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'point3'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point3'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point3'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point3'

          _view._addElement(EJSS_DRAWING2D.segment, "corda2", _view.y_time); // EJsS HtmlView.HtmlView Page: declaration of element 'corda2'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical32", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical32'
            .setProperty("SizeX", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical32'
            .setProperty("LineColor", "Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vertical32'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vertical32'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical22", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical22'
            .setProperty("SizeX", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical22'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "vertical12", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical12'
            .setProperty("SizeX", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vertical12'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "horizontal12", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'horizontal12'
            .setProperty("LineColor", "Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'horizontal12'
            .setProperty("SizeY", 0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'horizontal12'
            .setProperty("LineWidth", 2); // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'horizontal12'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "tan2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tan2'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tan2'
            .setProperty("LineWidth", 2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tan2'
            .setProperty("Offset", "CENTERED"); // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'tan2'

          _view
            ._addElement(EJSS_DRAWING2D.text, "vmed2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vmed2'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vmed2'
            .setProperty("RelativePosition", "NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'vmed2'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vmed2'
            .setProperty("Font", "normal normal 11px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'vmed2'

          _view
            ._addElement(EJSS_DRAWING2D.text, "deltax2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'deltax2'
            .setProperty("RelativePosition", "WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'deltax2'
            .setProperty("Font", "normal normal 12px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'deltax2'

          _view
            ._addElement(EJSS_DRAWING2D.text, "deltat2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'deltat2'
            .setProperty("RelativePosition", "NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'deltat2'
            .setProperty("Font", "normal normal 12px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'deltat2'

          _view
            ._addElement(EJSS_DRAWING2D.text, "tf2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tf2'
            .setProperty("RelativePosition", "SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'tf2'
            .setProperty("Y", -9.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tf2'
            .setProperty("Font", "normal normal 6px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'tf2'

          _view
            ._addElement(EJSS_DRAWING2D.text, "ti2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'ti2'
            .setProperty("RelativePosition", "SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ti2'
            .setProperty("Y", -9.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ti2'
            .setProperty("Font", "normal normal 6px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'ti2'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "pf2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'pf2'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pf2'
            .setProperty("SizeX", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pf2'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pf2'
            .setProperty("SizeY", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pf2'
            .setProperty("EnabledPosition", "ENABLED_X"); // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'pf2'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "pi2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'pi2'
            .setProperty("SizeX", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pi2'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pi2'
            .setProperty("SizeY", 10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pi2'
            .setProperty("EnabledPosition", "ENABLED_X"); // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'pi2'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "taxis2", _view.y_time) // EJsS HtmlView.HtmlView Page: declaration of element 'taxis2'
            .setProperty("X", 0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'taxis2'
            .setProperty("Y", 0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'taxis2'
            .setProperty("SizeY", 0); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'taxis2'

          _view
            ._addElement(EJSS_INTERFACE.panel, "panel_plots", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel_plots'
            .setProperty("CSS", {
              display: "block",
              "margin-left": "0.0cm",
              "margin-right": "0.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0px",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel_plots'

          _view
            ._addElement(
              EJSS_DRAWING2D.plottingPanel,
              "velocity_time",
              _view.panel_plots
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity_time'
            .setProperty("XFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'velocity_time'
            .setProperty("Enabled", false) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'velocity_time'
            .setProperty("MaximumY", 1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'velocity_time'
            .setProperty("YFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'velocity_time'
            .setProperty("MinimumX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'velocity_time'
            .setProperty("MinimumY", -1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'velocity_time'
            .setProperty("TitleY", "vx(azul),vy(vrml) (m/s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'velocity_time'
            .setProperty("TitleMargin", 0) // EJsS HtmlView.HtmlView Page: setting property 'TitleMargin' for element 'velocity_time'
            .setProperty("TitleX", "t (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'velocity_time'
            .setProperty("AutoScaleY", true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'velocity_time'
            .setProperty("AutoScaleX", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'velocity_time'
            .setProperty("TitleColor", "rgba(null)"); // EJsS HtmlView.HtmlView Page: setting property 'TitleColor' for element 'velocity_time'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "vy", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vy'
            .setProperty("LineColor", "Red"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vy'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "vx", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vx'
            .setProperty("LineColor", "Blue"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vx'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "vel2", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'vel2'
            .setProperty("LineColor", "Black"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vel2'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point22", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point22'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'point22'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point22'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point22'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point22'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point2", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point2'
            .setProperty("FillColor", "Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'point2'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point2'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point2'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point2'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "tan222", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tan222'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tan222'
            .setProperty("LineWidth", 2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tan222'
            .setProperty("Offset", "CENTERED"); // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'tan222'

          _view
            ._addElement(EJSS_DRAWING2D.segment, "tan22", _view.velocity_time) // EJsS HtmlView.HtmlView Page: declaration of element 'tan22'
            .setProperty("LineColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tan22'
            .setProperty("LineWidth", 2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tan22'
            .setProperty("Offset", "CENTERED"); // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'tan22'

          _view
            ._addElement(
              EJSS_DRAWING2D.plottingPanel,
              "acel_time",
              _view.panel_plots
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'acel_time'
            .setProperty("XFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'acel_time'
            .setProperty("MaximumY", 30) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'acel_time'
            .setProperty("YFixedTick", 0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'acel_time'
            .setProperty("MinimumX", 0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'acel_time'
            .setProperty("MinimumY", -30) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'acel_time'
            .setProperty("TitleY", "ax,ay (m/sÀÜ2)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'acel_time'
            .setProperty("TitleX", "t (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'acel_time'
            .setProperty("AutoScaleY", true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'acel_time'
            .setProperty("AutoScaleX", false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'acel_time'
            .setProperty("TitleColor", "rgba(null)"); // EJsS HtmlView.HtmlView Page: setting property 'TitleColor' for element 'acel_time'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "ay", _view.acel_time) // EJsS HtmlView.HtmlView Page: declaration of element 'ay'
            .setProperty("LineColor", "Red"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ay'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "ax", _view.acel_time) // EJsS HtmlView.HtmlView Page: declaration of element 'ax'
            .setProperty("LineColor", "Blue"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ax'

          _view
            ._addElement(EJSS_DRAWING2D.trail, "acel2", _view.acel_time) // EJsS HtmlView.HtmlView Page: declaration of element 'acel2'
            .setProperty("LineColor", "Black"); // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acel2'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point222", _view.acel_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point222'
            .setProperty("FillColor", "Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'point222'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point222'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point222'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point222'

          _view
            ._addElement(EJSS_DRAWING2D.shape, "point23", _view.acel_time) // EJsS HtmlView.HtmlView Page: declaration of element 'point23'
            .setProperty("FillColor", "Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'point23'
            .setProperty("SizeX", 5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'point23'
            .setProperty("PixelSize", true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'point23'
            .setProperty("SizeY", 5); // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'point23'

          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "functionPanel",
              _view.centerPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'functionPanel'
            .setProperty("CSS", {
              display: "block",
              "vertical-align": "center",
              "margin-left": "0.0cm",
              "margin-right": "0.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0px",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'functionPanel'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "label",
              _view.functionPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
            .setProperty("Text", "x(t)="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'

          _view._addElement(
            EJSS_INTERFACE.functionField,
            "x_t",
            _view.functionPanel
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'x_t'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "label2",
              _view.functionPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'label2'
            .setProperty("Text", "y(t)="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2'

          _view._addElement(
            EJSS_INTERFACE.functionField,
            "y_t",
            _view.functionPanel
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'y_t'

          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "functionPanel2",
              _view.centerPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'functionPanel2'
            .setProperty("CSS", {
              display: "block",
              "vertical-align": "center",
              "margin-left": "0.0cm",
              "margin-right": "0.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0px",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'functionPanel2'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "lxmin",
              _view.functionPanel2
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'lxmin'
            .setProperty("Text", "xmin="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lxmin'

          _view._addElement(
            EJSS_INTERFACE.numberField,
            "xmin",
            _view.functionPanel2
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'xmin'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "lxmax",
              _view.functionPanel2
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'lxmax'
            .setProperty("Text", "xmax="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lxmax'

          _view._addElement(
            EJSS_INTERFACE.numberField,
            "xmax",
            _view.functionPanel2
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'xmax'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "lymin",
              _view.functionPanel2
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'lymin'
            .setProperty("Text", "ymin="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lymin'

          _view._addElement(
            EJSS_INTERFACE.numberField,
            "ymin",
            _view.functionPanel2
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'ymin'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "lymax",
              _view.functionPanel2
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'lymax'
            .setProperty("Text", "ymax="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lymax'

          _view._addElement(
            EJSS_INTERFACE.numberField,
            "ymax",
            _view.functionPanel2
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'ymax'

          _view
            ._addElement(
              EJSS_INTERFACE.imageAndTextButton,
              "ltmax",
              _view.functionPanel2
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'ltmax'
            .setProperty("Text", "tmax="); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ltmax'

          _view._addElement(
            EJSS_INTERFACE.numberField,
            "tmax",
            _view.functionPanel2
          ); // EJsS HtmlView.HtmlView Page: declaration of element 'tmax'

          _view
            ._addElement(EJSS_INTERFACE.panel, "bottomPanel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel'
            .setProperty("CSS", {
              display: "block",
              "vertical-align": "center",
              "margin-left": "0.0cm",
              "margin-right": "0.0cm",
              "margin-top": "0.0cm",
              "margin-bottom": "0px",
            }); // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomPanel'

          _view
            ._addElement(
              EJSS_INTERFACE.twoStateButton,
              "playPauseButton",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
            .setProperty("Tooltip", "Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
            .setProperty(
              "ImageOnUrl",
              "/org/opensourcephysics/resources/controls/images/play.gif"
            ) // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
            .setProperty(
              "ImageOffUrl",
              "/org/opensourcephysics/resources/controls/images/pause.gif"
            ); // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'

          _view
            ._addElement(EJSS_INTERFACE.button, "stepButton", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
            .setProperty(
              "ImageUrl",
              "/org/opensourcephysics/resources/controls/images/stepforward.gif"
            ); // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'

          _view
            ._addElement(EJSS_INTERFACE.button, "stepback", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepback'
            .setProperty(
              "ImageUrl",
              "/org/opensourcephysics/resources/controls/images/stepBack.gif"
            ); // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepback'

          _view
            ._addElement(
              EJSS_INTERFACE.button,
              "resetButton",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
            .setProperty(
              "ImageUrl",
              "/org/opensourcephysics/resources/controls/images/reset.gif"
            ); // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'

          _view
            ._addElement(EJSS_INTERFACE.checkBox, "showTraj", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'showTraj'
            .setProperty("Text", "--") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showTraj'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showTraj'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showPosVec",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showPosVec'
            .setProperty("Text", "r") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showPosVec'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showPosVec'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showPlotPos",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showPlotPos'
            .setProperty("Text", "r(t)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showPlotPos'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showPlotPos'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showVelVec",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showVelVec'
            .setProperty("Text", "v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showVelVec'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showVelVec'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showPlotVelocity",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showPlotVelocity'
            .setProperty("Text", "v(t)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showPlotVelocity'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showPlotVelocity'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showAcelVec",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showAcelVec'
            .setProperty("Text", "a") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showAcelVec'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showAcelVec'

          _view
            ._addElement(
              EJSS_INTERFACE.checkBox,
              "showPlotAcel",
              _view.bottomPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'showPlotAcel'
            .setProperty("Text", "a(t)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showPlotAcel'
            .setProperty("Font", "normal bold 10px "); // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'showPlotAcel'

          _view
            ._addElement(EJSS_INTERFACE.checkBox, "showEqs", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'showEqs'
            .setProperty("Text", "Eq."); // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showEqs'

          _view
            ._addElement(
              EJSS_INTERFACE.panel,
              "textPanel",
              _view.SimulationPanel
            ) // EJsS HtmlView.HtmlView Page: declaration of element 'textPanel'
            .setProperty(
              "Html",
              "<h2>Instru√ß√£o de uso</h2> <p>Observe o movimento bidimensional no painel superior (desabilite r(t), v(t) e a(t)).</p> <p>Observe como varia a posi√ß√£o com o tempo, voc√™ pode mudar as fun√ß√µes x(t) e y(t).</p> <p>Clique no painel r(t), um ponto aparecer√°, voc√™ pode mov√™-lo usando o mouse.</p> <p>Clique novamente e outro ponto aparecer√° </p> <p>Move esses pontos com o mouse, o que significa cada n√∫mero?</p> <p>Fa√ßa o limite quando dt tende a zero...</p>"
            ); // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'textPanel'
        };

        return _view;
      }

      //--><!]]>
    </script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align: center"></div>
    <div id="metadata" class="metadata">
      <br />
      <div id="title_author">
        <hr />
        <b>Title and author:</b>
        <p>Cinem√°tica 2D<br /></p>
        <p>
          <img alt="author image" src="HAC_logo.png" />
          Humberto Carmona
        </p>
      </div>
      <hr />
      <p></p>
      <div id="copyright_message">
        <div class="cc_left" style="float: left">
          &#169; 2025, Humberto Carmona. Compiled with EJS 6.02_BETA (201222)
        </div>
        <div class="cc_right" style="float: right">
          Released under a
          <a
            rel="license"
            target="_blank"
            href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"
          >
            <img
              alt="Creative Commons Attribution-NonCommercial-ShareAlike"
              src="library/images/cc_icon.png"
            />
          </a>
          license.
        </div>
      </div>
    </div>
    <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener(
        "load",
        function () {
          _model = new cinematica2Dv3("_topFrame", "library/", null);
          if (typeof _isApp !== "undefined" && _isApp)
            _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = "_topFrame";
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function (e, args) {
              _model._fontResized(args[0].iBase, args[0].iSize, args[0].iDelta);
            }, null);
            _model._fontResized(iBase);
          };
          _model.onload();
        },
        false
      );
      //--><!]]>
    </script>
  </body>
</html>
